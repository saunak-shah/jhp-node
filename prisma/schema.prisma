// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum gender {
  Male   @map("M")
  Female @map("F")
}

enum Role {
  Admin   @map("1")
  Teacher @map("2")
  Support @map("3")
}

model organization {
  organization_id Int      @id @default(autoincrement())
  name            String
  location        String
  phone_number    String   @unique
  email           String   @unique
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @map("updated_at")

  master_role master_role[]
  student     student[]
  teacher     teacher[]
  course      course[]

  @@index([name])
}

model master_role {
  master_role_id  Int      @id @default(autoincrement())
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @map("updated_at")
  organization_id Int
  role_name       Role
  role_access     String

  organization organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  teacher      teacher[]
}

model student {
  student_id                      Int      @id @default(autoincrement())
  first_name                      String
  last_name                       String
  father_name                     String
  phone_number                    String
  address                         String
  email                           String
  password                        String
  birth_date                      DateTime
  gender                          gender
  register_no                     String   @unique
  username                        String   @unique
  reset_password_token            String   @default("")
  reset_password_token_expiration DateTime @default(now())
  reset_email_token               String   @default("")
  reset_email_token_expiration    DateTime @default(now())
  created_at                      DateTime @default(now()) @map("created_at")
  updated_at                      DateTime @default(now()) @map("updated_at")
  organization_id                 Int
  assigned_to                     Int?
  teacher                         teacher? @relation(fields: [assigned_to], references: [teacher_id], onDelete: SetNull)

  organization         organization           @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  course               course[]
  student_apply_course student_apply_course[]
  attendance           attendance[]

  @@index([organization_id])
  @@index([first_name, last_name])
  @@index([first_name, last_name, phone_number])
  @@index([reset_email_token])
  @@index([reset_email_token, reset_email_token_expiration])
  @@index([reset_password_token])
  @@index([reset_password_token, reset_password_token_expiration])
}

model teacher {
  teacher_id                              Int         @id @default(autoincrement())
  teacher_first_name                      String
  teacher_last_name                       String
  teacher_phone_number                    String
  teacher_email                           String
  teacher_address                         String
  teacher_password                        String      @unique
  teacher_birth_date                      DateTime
  teacher_gender                          gender
  teacher_username                        String      @unique
  teacher_reset_password_token            String      @default("")
  teacher_reset_password_token_expiration DateTime    @default(now())
  created_at                              DateTime    @default(now()) @map("created_at")
  updated_at                              DateTime    @default(now()) @map("updated_at")
  master_role_id                          Int
  master_role                             master_role @relation(fields: [master_role_id], references: [master_role_id], onDelete: Cascade)
  group_ids                               Int[]       @default([])

  organization_id Int
  organization    organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  attendance      attendance[]
  student         student[]
  course          course[]
  result          result[]

  @@index([organization_id])
  @@index([teacher_first_name, teacher_last_name])
  @@index([teacher_first_name, teacher_last_name, teacher_phone_number])
  @@index([teacher_reset_password_token])
  @@index([teacher_reset_password_token, teacher_reset_password_token_expiration])
}

model groups {
  group_id    Int      @id @default(autoincrement())
  group_name  String
  teacher_ids Int[]    @default([])
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @map("updated_at")
}

model course {
  course_id                  Int          @id @default(autoincrement())
  created_at                 DateTime     @default(now()) @map("created_at")
  updated_at                 DateTime     @default(now()) @map("updated_at")
  course_name                String
  file_url                   String
  course_date                DateTime
  course_duration_in_hours   Int
  course_description         String
  course_score               Float
  course_location            String
  course_passing_score       Float
  course_max_attempts        Int
  is_active                  Boolean
  registration_starting_date DateTime
  registration_closing_date  DateTime
  result_date                DateTime?
  created_by                 Int
  teacher                    teacher      @relation(fields: [created_by], references: [teacher_id], onDelete: Cascade)
  organization_id            Int
  organization               organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  category                   category

  student_apply_course student_apply_course[]
  student              student?               @relation(fields: [studentStudent_id], references: [student_id])
  studentStudent_id    Int?

  @@index([category])
  @@index([course_name, course_date])
  @@index([course_name, course_date, category])
}

enum category {
  A @map("1")
  B @map("2")
  C @map("3")
  D @map("4")
}

model student_apply_course {
  student_apply_course_id Int      @id @default(autoincrement())
  created_at              DateTime @default(now()) @map("created_at")
  updated_at              DateTime @default(now()) @map("updated_at")
  reg_id                  String   @unique
  course_id               Int
  course                  course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  student_id              Int
  student                 student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)

  result result[]

  @@index([student_id, course_id])
  @@index([student_id])
  @@index([course_id])
}

model result {
  result_id            Int                  @id @default(autoincrement())
  created_at           DateTime             @default(now()) @map("created_at")
  updated_at           DateTime             @default(now()) @map("updated_at")
  score                Float
  course_passing_score Float
  course_score         Float
  reg_id               String                  @unique
  student_apply_course student_apply_course @relation(fields: [reg_id], references: [reg_id], onDelete: Cascade)
  creator_id           Int
  teacher              teacher              @relation(fields: [creator_id], references: [teacher_id], onDelete: Cascade)

  @@index([result_id])
  @@index([creator_id])
}

model attendance {
  attendance_id Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @map("updated_at")
  date          DateTime
  student_id    Int
  student       student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  teacher_id    Int
  teacher       teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)

  @@unique([date, student_id])
  @@index([date])
  @@index([date, student_id])
  @@index([date, teacher_id, student_id])
}
