// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum gender {
  Male   @map("M")
  Female @map("F")
}

enum Role {
  Admin   @map("1")
  Teacher @map("2")
  Support @map("3")
}

enum ExamScheduleStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model organization {
  organization_id Int      @id @default(autoincrement())
  name            String
  location        String
  phone_number    String   @unique
  email           String   @unique
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @map("updated_at")

  master_role master_role[]
  student     student[]
  teacher     teacher[]
  course      course[]
  program     program[]

  @@index([name])
}

model master_role {
  master_role_id  Int      @id @default(autoincrement())
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @map("updated_at")
  organization_id Int
  role_name       Role
  role_access     String

  organization organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  teacher      teacher[]
}

model student {
  student_id                      Int      @id @default(autoincrement())
  first_name                      String
  last_name                       String
  father_name                     String
  phone_number                    String
  address                         String
  email                           String
  password                        String
  birth_date                      DateTime
  gender                          gender
  register_no                     String   @unique
  username                        String   @unique
  reset_password_token            String   @default("")
  reset_password_token_expiration DateTime @default(now())
  reset_email_token               String   @default("")
  reset_email_token_expiration    DateTime @default(now())
  created_at                      DateTime @default(now()) @map("created_at")
  updated_at                      DateTime @default(now()) @map("updated_at")
  organization_id                 Int
  assigned_to                     Int?
  teacher                         teacher? @relation(fields: [assigned_to], references: [teacher_id], onDelete: SetNull)

  organization          organization            @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  course                course[]
  student_apply_course  student_apply_course[]
  attendance            attendance[]
  status                Int                     @default(2)
  student_apply_program student_apply_program[]

  @@index([organization_id])
  @@index([first_name, last_name])
  @@index([first_name, last_name, phone_number])
  @@index([reset_email_token])
  @@index([reset_email_token, reset_email_token_expiration])
  @@index([reset_password_token])
  @@index([reset_password_token, reset_password_token_expiration])
}

model teacher {
  teacher_id                              Int         @id @default(autoincrement())
  teacher_first_name                      String
  teacher_last_name                       String
  teacher_phone_number                    String
  teacher_email                           String
  teacher_address                         String
  teacher_password                        String      @unique
  teacher_birth_date                      DateTime
  teacher_gender                          gender
  teacher_username                        String      @unique
  teacher_reset_password_token            String      @default("")
  teacher_reset_password_token_expiration DateTime    @default(now())
  created_at                              DateTime    @default(now()) @map("created_at")
  updated_at                              DateTime    @default(now()) @map("updated_at")
  master_role_id                          Int
  master_role                             master_role @relation(fields: [master_role_id], references: [master_role_id], onDelete: Cascade)
  group_ids                               Int[]       @default([])

  organization_id Int
  organization    organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  attendance      attendance[]
  student         student[]
  result          result[]
  program         program[]

  @@index([organization_id])
  @@index([teacher_first_name, teacher_last_name])
  @@index([teacher_first_name, teacher_last_name, teacher_phone_number])
  @@index([teacher_reset_password_token])
  @@index([teacher_reset_password_token, teacher_reset_password_token_expiration])
}

model groups {
  group_id    Int      @id @default(autoincrement())
  group_name  String
  teacher_ids Int[]    @default([])
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @map("updated_at")
}

model course {
  course_id          Int          @id @default(autoincrement())
  created_at         DateTime     @default(now()) @map("created_at")
  updated_at         DateTime     @default(now()) @map("updated_at")
  course_name        String
  file_url           String
  course_description String
  is_active          Boolean
  created_by         Int
  organization_id    Int
  organization       organization @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)

  student_apply_course student_apply_course[]
  exam_schedule        exam_schedule[]
  student              student?               @relation(fields: [studentStudent_id], references: [student_id])
  studentStudent_id    Int?
}

enum category {
  A @map("1")
  B @map("2")
  C @map("3")
  D @map("4")
}

model student_apply_course {
  student_apply_course_id Int      @id @default(autoincrement())
  reg_id                  String   @unique
  course_id               Int
  student_id              Int
  schedule_id             Int
  created_at              DateTime @default(now()) @map("created_at")
  updated_at              DateTime @default(now()) @map("updated_at")

  result        result[]
  course        course        @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  student       student       @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  exam_schedule exam_schedule @relation(fields: [schedule_id], references: [schedule_id], onDelete: Cascade)
}

model result {
  result_id            Int      @id @default(autoincrement())
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @default(now()) @map("updated_at")
  score                Float
  course_passing_score Float
  course_score         Float

  reg_id String @unique

  student_apply_course student_apply_course @relation(fields: [reg_id], references: [reg_id], onDelete: Cascade)

  creator_id Int
  teacher    teacher @relation(fields: [creator_id], references: [teacher_id], onDelete: Cascade)
}

model attendance {
  attendance_id Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @map("updated_at")
  date          DateTime
  student_id    Int
  student       student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  teacher_id    Int
  teacher       teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  attendance_by Int?

  @@unique([date, student_id])
  @@index([date])
  @@index([date, student_id])
  @@index([date, teacher_id, student_id])
}

model program {
  program_id          Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @map("created_at")
  updated_at          DateTime           @default(now()) @map("updated_at")
  program_name        String
  file_url            String
  program_description String
  created_by          Int
  teacher             teacher            @relation(fields: [created_by], references: [teacher_id], onDelete: Cascade)
  organization_id     Int
  organization        organization       @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade)
  program_schedule    program_schedule[]

  @@index([program_name])
}

model student_apply_program {
  student_apply_program_id Int    @id @default(autoincrement())
  reg_id                   String @unique
  student_id               Int
  schedule_id              Int

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @map("updated_at")

  student          student          @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  program_schedule program_schedule @relation(fields: [schedule_id], references: [schedule_id], onDelete: Cascade)

  @@index([student_id])
}

model exam_schedule {
  schedule_id                Int                @id @default(autoincrement())
  course_id                  Int
  course                     course             @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  exam_name                  String             @default("Exam Name Pending")
  registration_starting_date DateTime
  registration_closing_date  DateTime
  location                   String
  start_time                 DateTime
  end_time                   DateTime
  total_marks                Int
  passing_score              Int
  status                     ExamScheduleStatus @default(SCHEDULED)
  is_exam_active             Boolean            @default(true)
  created_at                 DateTime           @default(now()) @map("created_at")
  updated_at                 DateTime           @default(now()) @map("updated_at")

  student_apply_course student_apply_course[]

  @@index([course_id])
}

model program_schedule {
  schedule_id                Int                     @id @default(autoincrement())
  program_id                 Int
  program                    program                 @relation(fields: [program_id], references: [program_id], onDelete: Cascade)
  program_starting_date      DateTime
  program_ending_date        DateTime
  registration_starting_date DateTime
  registration_closing_date  DateTime
  is_program_active          Boolean                 @default(true)
  program_location           String
  created_at                 DateTime                @default(now()) @map("created_at")
  updated_at                 DateTime                @default(now()) @map("updated_at")
  student_apply_program      student_apply_program[]

  @@index([program_id])
}

// age limit add for exam
